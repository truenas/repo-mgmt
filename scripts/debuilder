#!/usr/bin/env python3
import argparse
import datetime
import logging
import os
import subprocess
import sys

logger = logging.getLogger('debuilder')


def run(cmd):
    try:
        return subprocess.run(
            cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
            check=True, text=True,
        ).stdout.strip()
    except subprocess.CalledProcessError as e:
        raise ValueError(str(e) + e.stdout) from None


def generate_package(path, distribution, version, build_deb, no_sign):

    os.chdir(path)

    source_name = run('dpkg-parsechangelog -S source')
    logger.debug('Source name: %s', source_name)

    version = run('dpkg-parsechangelog -S version').split('-')[0].split('+')[0]
    logger.debug('Version: %s', version)

    native_package = 'native' in run('dpkg-source --print-format .')

    ctime, chash = run('git show -s --format=%ct,%h HEAD').split(',')
    chash = chash[:7]

    date = datetime.datetime.fromtimestamp(int(ctime))
    date = date.strftime('%Y%m%d%H%M')
    logger.debug('Commit date: %s', date)
    logger.debug('Commit hash: %s', chash)

    version = f'{version}+git{date}.{chash}'
    logger.debug('New Version: %s', version)

    run(f'dch -M -b -v "{version}{"" if native_package else "-1"}~truenas+{0 if "experimental" in distribution else 1}" --force-distribution -D {distribution} "New release"')

    # Add gitattributes to not export debian/
    with open('.gitattributes', 'w') as f:
        f.write('debian export-ignore\n.gitattributes export-ignore\n')
    run(
        'git archive --format=tar.gz --worktree-attributes '
        f'-o ../{source_name}_{version}.orig.tar.gz HEAD'
    )

    if build_deb:
        run(f'dpkg-buildpackage -sa{" -uc -us" if no_sign else ""}')
    else:
        run(f'dpkg-buildpackage --no-check-builddeps -S -sa{" -uc -us" if no_sign else ""}')

    run('lintian --suppress-tags bad-distribution-in-changes-file,changed-by-address-malformed')


def setup_logging(verbose):
    level = logging.ERROR
    if verbose:
        if verbose == 1:
            level = logging.WARNING
        elif verbose == 2:
            level = logging.INFO
        else:
            level = logging.DEBUG
    logging.basicConfig(format='%(message)s', stream=sys.stdout, level=logging.DEBUG)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--path', required=True)
    parser.add_argument('-D', '--distribution', required=True)
    parser.add_argument('-b', '--build-deb', type=bool, default=False)
    parser.add_argument('-V', '--version', default=None)
    parser.add_argument('-v', '--verbose', action='count')
    parser.add_argument('-ns', '--no-sign', action='store_true')

    args = parser.parse_args()

    setup_logging(args.verbose)
    generate_package(args.path, args.distribution, args.version, args.build_deb, args.no_sign)


if __name__ == '__main__':
    main()
